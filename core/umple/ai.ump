
strictness allow 46;

namespace api.ai;

interface IAction {
	boolean isInRange();
	void setInRange(boolean aInRange);
	boolean requiresInRange();
	float getCost();

	boolean testConditions(IActor aActor);

	boolean canDo();
	boolean execute(IActor aActor);
	boolean isDone();

	void reset();

}

interface IGoal {}

@FunctionalInterface interface ICondition {
	depend java.util.function.Predicate;

	<T> Predicate<T> getTest();
	
	default <T> boolean isMet (T value) {
		return getTest().test(value);
	}
}


/* */
/* */
/* */
namespace main.ai;

class AIBehavior {
	depend java.util.function.*;

	Predicate<IEvent> calm;
	Predicate<IEvent> provoke;
	Predicate<IEvent> startle;

	IEvent trigger;

	after set*Trigger { testEmotion(); }

	activity {
		Waiting {}
		Moving {}
		Resting {}
		Working {}
		Playing {}
	}

	emotion {
		Bored { 
			testEmotion() [provoke.test(trigger) || startle.test(trigger)] -> Alert; 
		}
		Afraid {
			testEmotion() [provoke.test(trigger)] -> Alert; 
		}
		Alert {
			testEmotion() [provoke.test(trigger)] -> Angry; 
			testEmotion() [startle.test(trigger)] -> Afraid; 
		}
		Angry {
			testEmotion() [startle.test(trigger)] -> Alert; 
		}
	}

	agency {
		Idle {}
		MoveTo {}
		PerformAction {}
	}
	
	@Override String toString() { return getClass().getSimpleName(); }
}

class Action {
	isA IAction;

	/* */
	const String ATTACK_MELEE = "";

	/* movement */
	const String MOVE_TO = "";

	/* */
	const String APPROACH = "";
	const String ATTACK_RANGED = "";
	const String AVOID = "";
	const String BEG = "";
	const String BREED = "";
	const String BREAK_BLOCK = "";
	const String BREAK_TILE_ENTITY = "";
	const String EAT_BLOCK = "";
	const String PATROL = "";
	const String PICKUP_ITEM = "";
	const String RETURN_HOME = "";
	const String SEARCH = "";
	const String USE_ITEM = "";
	const String USE_TILE_ENTITY = "";
	const String WAIT = "";

	/* */
	const String CLIMB = "";
	const String FOLLOW = "";
	const String JUMP = "";
	const String LURE = "";
	const String SWIM = "";
	const String WANDER = "";

	/* */


	/* targets */
	IEntity host;
	
	/* properties */
	ICondition[] conditions;
}

/* */
/* */
/* */

class DistanceCondition {
	isA ICondition;
	
}